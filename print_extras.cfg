## Copyright (C) 2023 Chris Laprade (chris@rootiest.com)
## 
## This file is part of printcfg.
## 
## printcfg is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## printcfg is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with printcfg.  If not, see <http://www.gnu.org/licenses/>.

#####################################
##            Print Extras         ##
##      Version 3.1.5 2023-4-9     ##
#####################################

## This file contains optional config
## sections and optional macros that can
## be used to extend the functionality 
##         of your printer.


################################
####### OPTIONAL_CONFIGS #######
################################

## Support Arcs (G2/G3)
#[gcode_arcs]
#resolution: 0.10

## Support for forcing moves outside of homing
#[force_move]
#enable_force_move: True

## Enable support for looping prints
#[sdcard_loop]

## Enable support for skew correction
#[skew_correction]



################################
####### OPTIONAL_MACROS ########
################################

################################
####### MARLIN COMMANDS ########
################################

[gcode_macro M601]
description: Pause printer
gcode:
    PAUSE ; Pause print

[gcode_macro M420]
description: Load bed mesh 
gcode:
    {% set s = params.S|default(0)|int %} ; S0 = clear, S1 = load
    {% if s == 0 %} ; clear
        BED_MESH_CLEAR ; Clear bed mesh
    {% else %} ; load
        {% set l = params.L|default('default') %} ; load profile
        BED_MESH_PROFILE LOAD={l} ; Load bed mesh profile
    {% endif %}

[gcode_macro M900]
description: Set Pressure Advance
gcode:
    {% if 'K' in params %} ; K value is required
        {% if 'E' in params %} ; E value is optional
            SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K} ; Set pressure advance
        {% else %} ; E value is not present
            SET_PRESSURE_ADVANCE ADVANCE={params.K} ; Set pressure advance
        {% endif %}
    {% endif %}

[gcode_macro G27]
description: Park the nozzle
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {printcfg.park_base} ; Park the nozzle

[gcode_macro G29]
description: Mesh the bed
gcode:
    {% set t = params.T|default(0)|float %} ; T value is optional
    {% if printer.idle_timeout.state == "Printing" %}
        {action_respond_info("This command cannot be used while printing")} ; Cannot run while printing
    {% else %}
        CG28 ; Home if needed
        {% if t > 30.0 %} ; Set bed temp if needed
            SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t} ; Set bed temp
            TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1} ; Wait for bed temp (within 1 degree)
        {% endif %}
        BED_MESH_CALIBRATE ; Mesh the bed
    {% endif %}

[gcode_macro M205]
description: Set square corner velocity
gcode:
    {% if 'X' in params %} ; X value is optional
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X} ; Set square corner velocity
    {% elif 'Y' in params %} ; Y value is optional
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y} ; Set square corner velocity
    {% endif %}

[gcode_macro M204]
description: Set acceleration
rename_existing: M204.1
gcode:
    {% set f = params.F|default(0.5)|float %} ; F value is optional
    {% if 'S' in params %} ; S value is required
        {% set s = params.S|float %} ; S value is required
        SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f } ; Set acceleration
    {% else %} ; S value is not present
        {% if 'P' in params %} ; P value is optional
            {% set p = params.P|float %} ; P value is optional
            {% if 'T' in params %} ; T value is optional
                {% set t = params.T|float %} ; T value is optional
                {% if p < t %} ; Use the smaller value
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f } ; Set acceleration
                {% else %} ; Use the smaller value
                SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f } ; Set acceleration
                {% endif %}
            {% else %} ; T value is not present
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f } ; Set acceleration
            {% endif %}
        {% elif 'T' in params %} ; T value is optional
            {% set t = params.T|float %} ; T value is optional 
            SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f } ; Set acceleration
        {% endif %}
    {% endif %}

################################
####### HEATER_OVERIDES ########
################################
## Replaces M109/M190 with TEMPERATURE_WAIT commands
## This will result in less time spent stabilizing the temps
[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 {rawparams}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}
#[gcode_macro M190]
#rename_existing: M99190
#gcode:
#    {% set s = params.S|float %}
#    M140 {rawparams}    ; Set bed temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
#    {% endif %}

################################
######### PID_EXTRUDER #########
################################
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set e = printer.toolhead.extruder %} ; get current extruder
  {% set T = params.TEMPERATURE|default(210)|float %} ; get target temperature
  {% set S = params.FAN_IN_PERCENT|default(0)|float *2.55 %} ; get fan speed
  {% set P = printer.configfile.config[e].pid_kp|float %} ; get PID parameters
  {% set I = printer.configfile.config[e].pid_ki|float %} ; get PID parameters
  {% set D = printer.configfile.config[e].pid_kd|float %} ; get PID parameters
  M106 S{S} ; Turn on fan
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old) ; Display old PID parameters
  PID_CALIBRATE HEATER={e} TARGET={T} ; PID Tune the extruder
  TURN_OFF_HEATERS ; Turn off heaters
  SAVE_CONFIG ; Save the new PID parameters
 
################################
############ PID_BED ###########
################################
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set T = params.TEMPERATURE|default(60)|float %} ; get target temperature
  {% set P = printer.configfile.config['heater_bed'].pid_kp|float %} ; get PID parameters
  {% set I = printer.configfile.config['heater_bed'].pid_ki|float %} ; get PID parameters
  {% set D = printer.configfile.config['heater_bed'].pid_kd|float %} ; get PID parameters
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old) ; Display old PID parameters
  PID_CALIBRATE HEATER=heater_bed TARGET={T} ; PID Tune the bed
  TURN_OFF_HEATERS ; Turn off heaters
  SAVE_CONFIG ; Save the new PID parameters

################################
######### GET_SYS_INFO #########
################################
[gcode_macro GET_SYS_INFO]
gcode:
    RESPOND MSG="Load: "{printer.system_stats.sysload} ; System Load
    RESPOND MSG="CPU: "{printer.system_stats.cputime}"%" ; CPU Usage
    RESPOND MSG="Free Mem: "{printer.system_stats.memavail}" B" ; Free Memory

################################
######### PRINT_STATS ##########
################################
[gcode_macro GET_PRINT_STATS]
gcode:
    RESPOND MSG="File: "{printer.print_stats.filename} ; File Name
    RESPOND MSG="File Path: "{printer.virtual_sdcard.file_path} ; File Path
    RESPOND MSG="File Position: "{printer.virtual_sdcard.file_position} ; File Position
    RESPOND MSG="File Size: "{printer.virtual_sdcard.file_size} ; File Size
    RESPOND MSG="Total Duration: "{printer.print_stats.total_duration} ; Total Duration
    RESPOND MSG="Print Duration: "{printer.print_stats.print_duration} ; Print Duration
    RESPOND MSG="Filament Used: "{printer.print_stats.filament_used} ; Filament Used
    RESPOND MSG="State: "{printer.print_stats.state} ; Print State
    RESPOND MSG="State: "{printer.print_stats.message} ; Print Message
    RESPOND MSG="Total Layers: "{printer.print_stats.info.total_layer} ; Total Layers
    RESPOND MSG="Current Layer: "{printer.print_stats.info.current_layer} ; Current Layer
    RESPOND MSG="Paused: "{printer.pause_resume.is_paused} ; Paused State
    RESPOND MSG="Idle State: "{printer.idle_timeout.state} ; Idle State
    RESPOND MSG="Printing Time: "{printer.idle_timeout.printing_time} ; Printing Time
    RESPOND MSG="Print Active: "{printer.virtual_sdcard.is_active} ; Print Active
    RESPOND MSG="Print Progress: "{printer.virtual_sdcard.progress} ; Print Progress

################################
######## POSITION_STATS ########
################################
[gcode_macro GET_POSITION_STATS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set FIL_SWITCH = 'filament_switch_sensor filament_sensor' %} ; Filament Switch Sensor
    {% set FIL_MOTION = 'filament_motion_sensor filament_motion' %} ; Filament Motion Sensor
    {% set CHAMBER_HEAT = printcfg.chamber_type + ' ' + printcfg.chamber_name %} ; chamber sensor
    {% set config = printer.configfile.settings %} ; get realtime configfile settings 
    {% if printer.toolhead.homed_axes %} ; check if printer supports homing
        RESPOND MSG="Homed Axis: "{printer.toolhead.homed_axes} ; List homed axes
    {% else %} ; if not homed
        RESPOND MSG="Homed Axis: none" ; List homed axes
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %} ; check if printer is homed
        GET_POSITION ; get current position stats
        RESPOND MSG="Gcode Position: X{printer.gcode_move.gcode_position.x}, Y{printer.gcode_move.gcode_position.y}, Z{printer.gcode_move.gcode_position.z}, E{printer.gcode_move.gcode_position.e}"
        RESPOND MSG="Stalls: "{printer.toolhead.stalls}
        RESPOND MSG="Minimum Position: X{printer.toolhead.axis_minimum.x}, Y{printer.toolhead.axis_minimum.y}, Z{printer.toolhead.axis_minimum.z}"
        RESPOND MSG="Maximum Position: X{printer.toolhead.axis_maximum.x}, Y{printer.toolhead.axis_maximum.y}, Z{printer.toolhead.axis_maximum.z}"
        RESPOND MSG="Maximum Velocity: {printer.toolhead.max_velocity}mm/s"
        RESPOND MSG="Maximum Acceleration: {printer.toolhead.max_accel}mm/s/s"
        RESPOND MSG="Maximum Accel-to-Decel: {printer.toolhead.max_accel_to_decel}mm/s/s"
        RESPOND MSG="Square Corner Velocity: {printer.toolhead.square_corner_velocity}mm/s"
        RESPOND MSG="Live Velocity: {printer.motion_report.live_velocity}mm/s"
        RESPOND MSG="Gcode Speed: {printer.gcode_move.speed}mm/s"
        RESPOND MSG="Gcode Speed Factor: {(printer.gcode_move.speed_factor * 100)}%"
        RESPOND MSG="Gcode Extrude Factor: {(printer.gcode_move.extrude_factor * 100)}%"
        RESPOND MSG="Absolute Positioning: "{printer.gcode_move.absolute_coordinates}
        RESPOND MSG="Absolute Extrusion: "{printer.gcode_move.absolute_extrude}
        GET_PROBE_LIMITS
        {% if printer.quad_gantry_level %} ; check if printer supports quad gantry level
            RESPOND MSG="Quad gantry Level Applied: "{printer.quad_gantry_level.applied}
        {% endif %}
        {% if printer.z_tilt %} ; check if printer supports z_tilt
            RESPOND MSG="Z-Tilt Applied: "{printer.z_tilt.applied}
        {% endif %}
        {% if printer.bed_mesh %} ; check if printer supports bed_mesh
            {% set bed_mesh = printer.bed_mesh %}
            RESPOND MSG="Bed Mesh Profile: "{bed_mesh.profile_name}
            RESPOND MSG="Bed Mesh Min: {bed_mesh.mesh_min}"
            RESPOND MSG="Bed Mesh Max: {bed_mesh.mesh_max}"
        {% endif %}
        {% if printer[FIL_SWITCH] %} ; check if printer supports filament switch sensor
            {% set fil_sensor = printer[FIL_SWITCH] %}
            RESPOND MSG="Filament Sensor Enabled: "{fil_sensor.enabled}
            RESPOND MSG="Filament Detected: "{fil_sensor.filament_detected}
        {% endif %}
        {% if printer[FIL_MOTION] %} ; check if printer supports filament motion sensor
            {% set fil_sensor = printer[FIL_MOTION] %}
            RESPOND MSG="Filament Sensor Enabled: "{fil_sensor.enabled}
            RESPOND MSG="Filament Detected: "{fil_sensor.filament_detected}
        {% endif %}
        {% set extruder = printer['extruder'] %}
        {% set heater_bed = printer['heater_bed'] %}
        {% set chamber = printer[CHAMBER_HEAT] %}
        RESPOND MSG="Extruder Temperature: {extruder.temperature}C"
        RESPOND MSG="Extruder Target Temp: {extruder.target}C"
        RESPOND MSG="Extruder Power: {(extruder.power * 100)}%"
        RESPOND MSG="Extruder Can Extrude: {extruder.can_extrude}"
        RESPOND MSG="Bed Temperature: {heater_bed.temperature}C"
        RESPOND MSG="Bed Target Temp: {heater_bed.target}C"
        RESPOND MSG="Bed Power: {(heater_bed.power * 100)}%"
        {% if chamber %} ; check if printer has chamber heating/sensing
            RESPOND MSG="Chamber Temperature: {chamber.temperature}C"
            RESPOND MSG="Chamber Target Temp: {chamber.target}C"
            {% if chamber.speed %} ; check if printer has chamber fan
                RESPOND MSG="Chamber Fan: {(chamber.speed * 100)}%"
            {% elif chamber.power %} ; check if printer has chamber heater
                RESPOND MSG="Chamber Power: {(heater_bed.power * 100)}%"
            {% endif %}
        {% endif %}
        {% if config["tmc2130 stepper_x"] %} ; check if printer has tmc2130 drivers
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2130 stepper_x"] %}
            {% set driver_y = printer["tmc2130 stepper_y"] %}
            {% set driver_z = printer["tmc2130 stepper_z"] %}
            {% if config["tmc2130 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2130 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2208 stepper_x"] %} ; check if printer has tmc2208 drivers
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2208 stepper_x"] %}
            {% set driver_y = printer["tmc2208 stepper_y"] %}
            {% set driver_z = printer["tmc2208 stepper_z"] %}
            {% if config["tmc2208 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2208 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2209 stepper_x"] %} ; check if printer has tmc2209 drivers
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2209 stepper_x"] %}
            {% set driver_y = printer["tmc2209 stepper_y"] %}
            {% set driver_z = printer["tmc2209 stepper_z"] %}
            {% if config["tmc2209 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2209 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2240 stepper_x"] %} ; check if printer has tmc2240 drivers
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2240 stepper_x"] %}
            {% set driver_y = printer["tmc2240 stepper_y"] %}
            {% set driver_z = printer["tmc2240 stepper_z"] %}
            {% if config["tmc2240 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2240 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2660 stepper_x"] %} ; check if printer has tmc2660 drivers
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc2660 stepper_x"] %}
            {% set driver_y = printer["tmc2660 stepper_y"] %}
            {% set driver_z = printer["tmc2660 stepper_z"] %}
            {% if config["tmc2660 stepper_z1"] %}
                {% set driver_z1 = printer["tmc2660 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc5160 stepper_x"] %} ; check if printer has tmc5160 drivers 
            {% set xyz_drive = True %}
            {% set driver_x = printer["tmc5160 stepper_x"] %}
            {% set driver_y = printer["tmc5160 stepper_y"] %}
            {% set driver_z = printer["tmc5160 stepper_z"] %}
            {% if config["tmc5160 stepper_z1"] %}
                {% set driver_z1 = printer["tmc5160 stepper_z1"] %}
            {% else %}
                {% set driver_z1 = 0 %}
            {% endif %}
        {% elif config["tmc2130 stepper_a"] %} ; check if printer has tmc2130 drivers
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2130 stepper_a"] %}
            {% set driver_y = printer["tmc2130 stepper_b"] %}
            {% set driver_z = printer["tmc2130 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc2208 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2208 stepper_a"] %}
            {% set driver_y = printer["tmc2208 stepper_b"] %}
            {% set driver_z = printer["tmc2208 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc2209 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2209 stepper_a"] %}
            {% set driver_y = printer["tmc2209 stepper_b"] %}
            {% set driver_z = printer["tmc2209 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc2260 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc2260 stepper_a"] %}
            {% set driver_y = printer["tmc2260 stepper_b"] %}
            {% set driver_z = printer["tmc2260 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% elif config["tmc5160 stepper_a"] %}
            {% set xyz_drive = False %}
            {% set driver_x = printer["tmc5160 stepper_a"] %}
            {% set driver_y = printer["tmc5160 stepper_b"] %}
            {% set driver_z = printer["tmc5160 stepper_c"] %}
            {% set driver_z1 = 0 %}
        {% else %}
            {% set driver = 0 %}
        {% endif %}
        {% if config["tmc2130 extruder"] %} ; check if printer has tmc2130 extruder driver
            {% set driver_e = printer["tmc2130 extruder"] %}
        {% elif config["tmc2208 extruder"] %} ; check if printer has tmc2208 extruder driver
            {% set driver_e = printer["tmc2208 extruder"] %}
        {% elif config["tmc2209 extruder"] %} ; check if printer has tmc2209 extruder driver
            {% set driver_e = printer["tmc2209 extruder"] %}
        {% elif config["tmc2240 extruder"] %} ; check if printer has tmc2240 extruder driver
            {% set driver_e = printer["tmc2240 extruder"] %}
        {% elif config["tmc2260 extruder"] %} ; check if printer has tmc2260 extruder driver
            {% set driver_e = printer["tmc2260 extruder"] %}
        {% elif config["tmc5160 extruder"] %} ; check if printer has tmc5160 extruder driver
            {% set driver_e = printer["tmc5160 extruder"] %}
        {% else %}
            {% set driver = 0 %}
        {% endif %}
        {% if driver != 0 %}
            {% if xyz_driver == True %}
                RESPOND MSG="X Stepper Run Current: "{driver_x.run_current}
                {% if driver_x.hold_current %}
                    RESPOND MSG="X Stepper Hold Current: "{driver_x.hold_current}
                {% endif %}
                RESPOND MSG="Y Stepper Run Current: "{driver_y.run_current}
                {% if driver_y.hold_current %}
                    RESPOND MSG="Y Stepper Hold Current: "{driver_y.hold_current}
                {% endif %}
                {% if driver_z1 == 0 %}
                    RESPOND MSG="Z Stepper Run Current: "{driver_z.run_current}
                    {% if driver_z.hold_current %}
                        RESPOND MSG="Z Stepper Hold Current: "{driver_z.hold_current}
                    {% endif %}
                {% else %}
                    RESPOND MSG="Z0 Stepper Run Current: "{driver_z.run_current}
                    {% if driver_z.hold_current %}
                        RESPOND MSG="Z0 Stepper Hold Current: "{driver_z.hold_current}
                    {% endif %}
                    RESPOND MSG="Z1 Stepper Run Current: "{driver_z1.run_current}
                    {% if driver_z1.hold_current %}
                        RESPOND MSG="Z1 Stepper Hold Current: "{driver_z1.hold_current}
                    {% endif %}
                {% endif %}
            {% else %}
                RESPOND MSG="A Stepper Run Current: "{driver_x.run_current}
                {% if driver_x.hold_current %}
                    RESPOND MSG="A Stepper Hold Current: "{driver_x.hold_current}
                {% endif %}
                RESPOND MSG="B Stepper Run Current: "{driver_y.run_current}
                {% if driver_y.hold_current %}
                    RESPOND MSG="B Stepper Hold Current: "{driver_y.hold_current}
                {% endif %}
                RESPOND MSG="C Stepper Run Current: "{driver_z.run_current}
                {% if driver_z.hold_current %}
                    RESPOND MSG="C Stepper Hold Current: "{driver_z.hold_current}
                {% endif %}
            {% endif %}
            RESPOND MSG="Extruder Run Current: "{driver_e.run_current}
            {% if driver_e.hold_current %}
                RESPOND MSG="Extruder Hold Current: "{driver_e.hold_current}
            {% endif %}
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="All axis must be homed to retrieve position stats."
    {% endif %}

################################
######### PROBE_LIMITS #########
################################
[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.settings %}
    ## Find probe config in configfile
    {% if config["bltouch"] %} ; check if printer has bltouch probe
        ## bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %} ; check if printer has generic probe
        ## probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% elif config["beacon"] %} ; check if printer has beacon probe
        ## beacon section found
        {% set probe = config["beacon"] %}
        {% set has_probe = True %}
    {% else %}
        ## No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %} ; check if probe was found
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        {% if probe.z_offset is defined %} ; check if probe has z_offset defined
            RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        {% elif probe.trigger_distance is defined %} ; check if probe has trigger_distance defined
            RESPOND MSG="Configured Probe Trigger Distance {probe.trigger_distance}"
        {% endif %}
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        ## check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} ; check if printer has been homed 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}

################################
######## DUMP_VARIABLES ########
################################
## From Ellis's Klipper Tuning Guide
## Arguments ####################
## NAME (string) - Filter results based on name (only show varables with names containing this string)
## VALUE (string) - Filter results based on value (only show values containing this value)
## SHOW_CFG (integer, 0-1) - Set to 1 to include entire config in output. Default 0 (config filtered out)
## Examples  ####################
## DUMP_VARIABLES: Returns all variables (excluding printer['configfile'].config and printer['configfile'].settings as they contain the entire config).
## DUMP_VARIABLES NAME=stepper: Returns all variables which have the string stepper in their name.
## DUMP_VARIABLES VALUE=extruder : Returns all variables which have the string extruder in their value.
## DUMP_VARIABLES NAME=stepper VALUE=extruder : Returns all variables which have the string stepper in their name and the string extruder in their value.
## DUMP_VARIABLES SHOW_CFG=1 : Returns all variables, including the config.
[gcode_macro DUMP_VARIABLES]
description: Dumps all current Klipper variables to the g-code terminal.
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %} ; filter by name
    {% set filter_value = params.VALUE|default('')|string|lower %} ; filter by value
    {% set show_cfg = params.SHOW_CFG|default(0)|int %} ; Show entire config in output
    {% set out = [] %} ; output array
    {% for key1 in printer %} ; loop through all variables
        {% for key2 in printer[key1] %} ; loop through all sub-variables
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %} ; check if variable should be included in output
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %} ; add variable to output
            {% endif %}
        {% else %} ; no sub-variables found
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %} ; check if variable should be included in output
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %} ; add variable to output
            {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))} ; output all variables

################################
######## DUMP_VARIABLES ########
################################
## Use:
## - DUMP_PARAMETER                            print all parameter expect configfile
## - DUMP_PARAMETER P='gcode_macro _TEST'      print the defined parameter group
## - DUMP_PARAMETER C='printer'                print the defined config values
## - DUMP_PARAMETER S='printer'                print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
    {% set config = True if params.C or params.S else False %} 
    {% set path = 'config'   if params.C
                else 'settings' if params.S %}
    {% set search = params.C if params.C
                else params.S if params.S
                else params.P if params.P %}
    {% set out = [] %}
    {% for name1 in printer|sort %}
        {% if config %} ; print the searched printer.configfile[path] parameter
        {% if name1 is in ['configfile'] %}
            {% for name2 in printer[name1][path]|sort %}
            {% if name2 is in [search] %}
                {% for name3, value in printer[name1][path][name2].items()|sort %}
                {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %
                            (path, name2, name3, value)) %}
                {% endfor %}
            {% endif %}
            {% endfor %}
        {% endif %}
        {% else %}
        {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
            {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
            {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
            {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
            {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
            {% endif %}
        {% endfor %}
        {% endif %}
    {% endfor %}
    {% if out|length > 0 %}
        {action_respond_info(out|join("\n"))}
    {% else %}
        {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
    {% endif %}

################################
########## TEST_SPEED ##########
################################
## From Ellis's Klipper Tuning Guide
## Home, get position, throw around toolhead, home again.
## If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
## We only measure to a full step to accomodate for endstop variance.
## Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
description: Throw around toolhead to test for skipping.
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}
    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION
    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}
    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION
    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

################################
######### FORCE_MOVES ##########
################################
## Commands that use the force_move feature to move the toolhead without homing

## UNSAFE_RAISE_TOOL
## Raise the toolhead without homing
########## Parameters ##########
## Z: The Z height to raise by (default: 10) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_RAISE_TOOL]
description: Raise the toolhead without homing
gcode:
    {% set z = params.Z|default(10)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z=0
    G0 Z{z} F{ (f*60) }
    M84

## UNSAFE_MOVE_TOOL
## Move the toolhead without homing
########## Parameters ##########
## X: The X distance to move by (default: 0) mm
## Y: The Y distance to move by (default: 0) mm
## Z: The Z distance to move by (default: 10) mm
## F: The feedrate to use (default: 10) mm/s
[gcode_macro UNSAFE_MOVE_TOOL]
description: Move the toolhead without homing
gcode:
    {% set z = params.Z|default(0)|float %}
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set f = params.F|default(10)|float %}
    G90
    SET_KINEMATIC_POSITION Z={(printer.toolhead.axis_maximum.z/2)} X={(printer.toolhead.axis_maximum.x/2)} Y={(printer.toolhead.axis_maximum.y/2)}
    G0 X{(printer.toolhead.axis_maximum.x/2)+x} Y{(printer.toolhead.axis_maximum.y/2)+y} Z{(printer.toolhead.axis_maximum.z/2)+z} F{ (f*60) }
    M84

## WHAT_MESH
## Respond with the name of the currently loaded mesh
[gcode_macro WHAT_MESH]
description: Respond with the name of the currently loaded mesh
gcode:
    {% if printer.bed_mesh.profile_name == "" %} ; If no mesh is loaded, the profile_name is an empty string
        { action_respond_info( "No mesh is loaded" ) } ; Respond with no mesh loaded
    {% else %} ; If a mesh is loaded, the profile_name is the mesh name
        { action_respond_info( "The {} mesh is loaded".format(printer.bed_mesh.profile_name) ) } ; Respond with the mesh name
    {% endif %}