[gcode_macro _printcfg_tester]
gcode:
    ## Define color-wrapper
    {% set ns = namespace() %}
    {% macro color_text(text='', color='primary') -%}
        {% set color = color | string %}
        {% set text = text | string  %}
        {% set ns.out = '<span class=' + color + '--text>' + text + '</span>'|string %}
    {% endmacro -%}

    # Welcome message
    { color_text(color="success", text="Welcome to the ") }
    {% set msg = ns.out %}
    { color_text(color="accent", text="P") }
    {% set msg = msg+ ns.out %}
    { color_text(color="error", text="r") }
    {% set msg = msg+ ns.out %}
    { color_text(color="warning", text="i") }
    {% set msg = msg+ ns.out %}
    { color_text(color="success", text="n") }
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="t") }
    {% set msg = msg+ ns.out %}
    { color_text(color="warning", text="C") }
    {% set msg = msg+ ns.out %}
    { color_text(color="primary", text="F") }
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="G") }
    {% set msg = msg+ ns.out %}
    { color_text(color="success", text=" Setup Wizard!") }
    {% set msg = msg+ ns.out %}
    { color_text(color="warning", text="\nThis macro will diagnose your PrintCFG settings.") }
    {% set msg = msg+ ns.out %}
    { action_respond_info( msg ) }

    # Read printcfg config settings
    {% set printcfg = printer.printcfg %}
    {% if printcfg.leds is defined %}
        {% set leds = printcfg.leds|string %}
    {% else %}
        {% set leds = "None" %}
    {% endif %}
    {% if printcfg.led_object is defined %}
        {% set led_object = printcfg.led_object|string %}
    {% else %}
        {% set led_object = "None" %}
    {% endif %}
    {% if printcfg.park_x is defined %}
        {% set parkx = printcfg.park_x|float %}
    {% else %}
        {% set parkx = "None" %}
    {% endif %}
    {% if printcfg.park_y is defined %}
        {% set parky = printcfg.park_y|float %}
    {% else %}
        {% set parky = "None" %}
    {% endif %}

    ## Output printcfg message
    { color_text(color="accent", text="PrintCFG current state:\n") }
    {% set msg = ns.out %}
    ## Output printcfg config state
    { color_text(color="info", text="Active LEDs: {}\n".format(leds)) }
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="LED Object: {}\n".format(led_object)) }
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="Active Parking Position: {},{}".format( parkx, parky )) }
    {% set msg = msg+ ns.out %}
    { action_respond_info( msg ) }
    ## Read configfile
    {% set config  = printer.configfile.settings %}
    {% set pconfig = config.printcfg %}
    {% if pconfig.enabled is defined %}
        {% set enabled = pconfig.enabled|string %}
    {% else %}
        {% set leds = "None" %}
    {% endif %}
    {% if pconfig.led_name is defined %}
        {% set leds = pconfig.led_name|string %}
    {% else %}
        {% set leds = "None" %}
    {% endif %}
    {% if pconfig.park_x is defined %}
        {% set parkx = pconfig.park_x|float %}
    {% else %}
        {% set parkx = "None" %}
    {% endif %}
    {% if pconfig.park_y is defined %}
        {% set parky = pconfig.park_y|float %}
    {% else %}
        {% set parky = "None" %}
    {% endif %}
    ## Output configfile message
    { color_text(color="accent", text="PrintCFG configfile:\n") }
    {% set msg = ns.out %}
    ## Output configfile values
    { color_text(color="info", text="enabled: ") }
    {% set msg = msg+ ns.out %}
    {% if enabled == "True" %}
        { color_text(color="success", text="{}\n".format(enabled)) }
    {% else %}
        { color_text(color="error", text="{}\n".format(enabled)) }
    {% endif %}
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="led_name: {}\n".format(leds)) }
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="park_x: {}\n".format( parkx )) }
    {% set msg = msg+ ns.out %}
    { color_text(color="info", text="park_y: {}".format( parky )) }
    {% set msg = msg+ ns.out %}
    { action_respond_info( msg ) }

    ## Output LED state if available
    {% if led_object != "None" %}
        { color_text(color="accent", text="PrintCFG LED State:\n") }
        {% set msg = ns.out %}
        {% set led_state = printer[led_object].color_data|string %}
        { color_text(color="info", text="{}\n".format(led_state)) }
        {% set msg = msg+ ns.out %}
        { action_respond_info( msg ) }
    {% endif %}

