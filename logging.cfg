## Copyright (C) 2023 Chris Laprade (chris@rootiest.com)
## 
## This file is part of printcfg.
## 
## printcfg is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## printcfg is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with printcfg.  If not, see <http://www.gnu.org/licenses/>.

##########################################
############### logger ###################
##########################################
## Parameters:                          ##
## TITLE: Title of the log entry        ##
## MSG: Message of the log entry        ##
## LEVEL: Level of the log entry        ##
## OUTPUT: Output the log               ##
## GLOBAL: Use global log               ##
##########################################
##########################################
## NOTE:                                ##
## Although this macro is included in   ##
## the printcfg package, it is not      ##
## dependent on printcfg to function.   ##
##                                      ##
## This file can be included in any     ##
## printer configuration and used in    ##
## any macro you wish to have logging.  ##
##########################################

## This macro allows you to log messages and output them. 
## The log is stored in the variable "log" and can be output with "logger output=1". 
## The global log is stored in the variable "global" and can be output with "logger global=1".
## The log is stored in the format [title, message, level] where level is 0-7.

## The log levels are as follows:
## 0: debug
## 1: info
## 2: notice
## 3: warning
## 4: error
## 5: critical
## 6: alert
## 7: emergency

## Outputting the log will clear the log.
## The global log will not be cleared until the printer is restarted.

## Examples:

## logger title="Test" msg="This is a test" level="info"
## This will log the message "This is a test" with the title "Test" and the level "info".

## logger title="Test" msg="This is a test" level="info" output=1
## This will log the message "This is a test" with the title "Test" and the level "info" and output/clear the log.

## logger
## This will output the log.

## logger global=1
## This will output the global log.

## logger level="debug"
## This will output the log with the level "debug" and higher.

## logger level="info" global=1
## This will output the global log with the level "info" and higher.


[gcode_macro logger]
description: Log messages for debugging
variable_log: []
variable_global: []
variable_number: 0
gcode:
    {% set title = params.TITLE|default('LOG') %} ; title parameter
    {% set msg = params.MSG|default('--------') %} ; message parameter
    {% set level = params.LEVEL %} ; log level parameter
    {% set output = params.OUTPUT|default(0)|int %} ; output parameter
    {% set only_global = params.GLOBAL|default(0)|int %} ; global parameter
    # Fix level strings
    {% if level|lower == "info" %}
        {% set level = 1 %}
    {% elif level|lower == "debug" %}
        {% set level = 0 %}
    {% elif level|lower == "warning" %}
        {% set level = 3 %}
    {% elif level|lower == "error" %}
        {% set level = 4 %}
    {% elif level|lower == "critical" %}
        {% set level = 5 %}
    {% elif level|lower == "alert" %}
        {% set level = 6 %}
    {% elif level|lower == "emergency" %}
        {% set level = 7 %}
    {% else %}
        {% set level = params.LEVEL|default(1)|int %}
    {% endif %}

    {% macro log_print(log=log, level=1, clear=1) -%} ; create log_print macro
        {% set out = [] %} ; create output array
        {% for entry in log %} ; loop through logger array
            # Check level 0-7 for log level
            {% if entry[2] == 7 and entry[2] >= level %} ; check if level is 7
                {% set _dummy = out.append("EMERGENCY: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 6 and entry[2] >= level %} ; check if level is 6
                {% set _dummy = out.append("ALERT: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 5 and entry[2] >= level %} ; check if level is 5
                {% set _dummy = out.append("CRITICAL: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 4 and entry[2] >= level %} ; check if level is 4
                {% set _dummy = out.append("ERROR: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 3 and entry[2] >= level %} ; check if level is 3
                {% set _dummy = out.append("WARNING:%s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 2 and entry[2] >= level %} ; check if level is 2
                {% set _dummy = out.append("NOTICE: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 1 and entry[2] >= level %} ; check if level is 0
                {% set _dummy = out.append("INFO: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% elif entry[2] == 0 and entry[2] >= level %} ; check if level is 3
                {% set _dummy = out.append("DEBUG: %s: %s" % (entry[0], entry[1])) %} ; append text to output array
            {% endif %}
        {% endfor %}
        {% if clear == 1 %}
            {% set _dummy = log.clear() %} ; clear logger array
        {% endif %}
        {% if out %}
            {action_respond_info(out|join("\n"))} ; output all variables
        {% else %}
            {action_respond_info("No log entries found.")} ; no log to output
        {% endif %}
    {% endmacro -%}

    {% macro log_entry(title='LOG', msg='--------', level=0, log=log) -%} ; create logger macro
        {% set entry = [title, msg, level, number] %} ; create entry array
        {% set number = number + 1 %} ; increment number
        {% set _dummy = log.append(entry) %} ; append text to logger array
    {% endmacro -%}

    {% if params.TITLE is defined or params.MSG is defined %} ; check if title and msg are not empty
        {% if only_global != 1 %}
            {% if level == -1 %}
                {% set level = 0 %}
            {% endif %}
            { log_entry(title=title, msg=msg, level=level, log=log) } ; call logger macro
        {% endif %}
        { log_entry(title=title, msg=msg, level=level, log=global)} ; call logger macro for global log
        {% if output == true %} ; check if output is true
            { log_print(log=log, level=level) } ; output log
        {% endif %}
    {% else %}
        {% if level == -1 %}
            {% set level = 1 %}
        {% endif %}
        {% if only_global != 1 %}
            { log_print(log=log, level=level) } ; output log
        {% else %}
            { log_print(log=global, level=level, clear=0) } ; output log
        {% endif %}
    {% endif %}

[gcode_macro TEST_LOGGER]
gcode:
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set my_var = params.MY_VAR|default('') %} ; example parameter
    logger title="Debugger" 
    logger msg="TEST_LOGGER" level=0 ; add macro name to log
    logger title="Variable" msg={my_var} level=1 ; add variable to log
    logger title="Configured Z-min" msg="{config.stepper_z.position_min}" level=2 ; add config value to log
    logger title="Configured Z-max" msg="{config.stepper_z.position_max}" level=3 ; add config value to log
    logger title="Debugging" msg="completed successfully" level=7 output=1 ; add debugging status to log and output log